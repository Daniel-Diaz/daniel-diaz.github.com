int[] v_1 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
             1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
             0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0,
             0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
             2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
             0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
             1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,
             0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1,
             0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
             0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1,
             1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
             3, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0,
             1, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 3, 3, 3, 3, 3,
             3, 3, 3, 3, 3, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1,
             0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 4,
             0, 0, 3, 0, 0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0, 0, 3,
             0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3,
             3, 0, 1, 3, 3, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 3, 3, 1, 0, 3, 3, 3,
             3, 3, 3, 3, 3, 3, 3, 0, 1, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0,
             0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0, 0, 3, 0, 0, 0, 0,
             0, 0, 0, 0, 3, 0, 0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0,
             0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1, 0, 3, 3, 3, 3, 3, 3, 3,
             3, 3, 3, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 3,
             3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
             3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
             1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0,
             1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
             0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,
             0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
             1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,
             0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
             0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
             0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,
             0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
             0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,
             1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
             1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0} ;
int v_2 = 242 ;
int v_3 = 23 ;
int v_4 = 14 ;
float v_5 = 0.0 ;
float v_6 = 0.0 ;
int v_7 = 23 ;
int v_8 = 15 ;
int v_9 = 15 ;
int v_10 = 12 ;
float v_11 = 4.712389 ;
int v_12 = 14 ;
int v_13 = 12 ;
int v_14 = 15 ;
int v_15 = 13 ;
float v_16 = 3.1415927 ;
int v_17 = 15 ;
int v_18 = 12 ;
int v_19 = 15 ;
int v_20 = 14 ;
float v_21 = 0.0 ;
int v_22 = 15 ;
int v_23 = 15 ;
int v_24 = 15 ;
int v_25 = 15 ;
float v_26 = 4.712389 ;
int v_27 = 14 ;
int v_28 = 15 ;
int v_29 = 0 ;
boolean v_30 = false ;
int v_31 = 175 ;
boolean v_32 = false ;
boolean v_33 = false ;
int v_34 = 1 ;
int v_35 = 1 ;
boolean v_36 = false ;
int v_37 = v_3 ;
int v_38 = v_4 ;
float v_39 = v_5 ;
float v_40 = v_6 ;
int v_41 = v_7 ;
int v_42 = v_8 ;
int v_43 = v_9 ;
int v_44 = v_10 ;
float v_45 = v_11 ;
int v_46 = v_12 ;
int v_47 = v_13 ;
int v_48 = v_14 ;
int v_49 = v_15 ;
float v_50 = v_16 ;
int v_51 = v_17 ;
int v_52 = v_18 ;
int v_53 = v_19 ;
int v_54 = v_20 ;
float v_55 = v_21 ;
int v_56 = v_22 ;
int v_57 = v_23 ;
int v_58 = v_24 ;
int v_59 = v_25 ;
float v_60 = v_26 ;
int v_61 = v_27 ;
int v_62 = v_28 ;
int v_63 = v_29 ;
boolean v_64 = v_30 ;
int v_65 = v_31 ;
boolean v_66 = v_32 ;
boolean v_67 = v_33 ;
int v_68 = v_1[29] ;
int v_69 = v_1[30] ;
int v_70 = v_1[31] ;
int v_71 = v_1[32] ;
int v_72 = v_1[33] ;
int v_73 = v_1[34] ;
int v_74 = v_1[35] ;
int v_75 = v_1[36] ;
int v_76 = v_1[37] ;
int v_77 = v_1[38] ;
int v_78 = v_1[39] ;
int v_79 = v_1[40] ;
int v_80 = v_1[43] ;
int v_81 = v_1[44] ;
int v_82 = v_1[45] ;
int v_83 = v_1[46] ;
int v_84 = v_1[47] ;
int v_85 = v_1[48] ;
int v_86 = v_1[49] ;
int v_87 = v_1[50] ;
int v_88 = v_1[51] ;
int v_89 = v_1[52] ;
int v_90 = v_1[53] ;
int v_91 = v_1[54] ;
int v_92 = v_1[57] ;
int v_93 = v_1[62] ;
int v_94 = v_1[68] ;
int v_95 = v_1[71] ;
int v_96 = v_1[77] ;
int v_97 = v_1[82] ;
int v_98 = v_1[90] ;
int v_99 = v_1[96] ;
int v_100 = v_1[99] ;
int v_101 = v_1[105] ;
int v_102 = v_1[113] ;
int v_103 = v_1[118] ;
int v_104 = v_1[124] ;
int v_105 = v_1[127] ;
int v_106 = v_1[133] ;
int v_107 = v_1[138] ;
int v_108 = v_1[141] ;
int v_109 = v_1[142] ;
int v_110 = v_1[143] ;
int v_111 = v_1[144] ;
int v_112 = v_1[145] ;
int v_113 = v_1[146] ;
int v_114 = v_1[147] ;
int v_115 = v_1[148] ;
int v_116 = v_1[149] ;
int v_117 = v_1[150] ;
int v_118 = v_1[151] ;
int v_119 = v_1[152] ;
int v_120 = v_1[153] ;
int v_121 = v_1[154] ;
int v_122 = v_1[155] ;
int v_123 = v_1[156] ;
int v_124 = v_1[157] ;
int v_125 = v_1[158] ;
int v_126 = v_1[159] ;
int v_127 = v_1[160] ;
int v_128 = v_1[161] ;
int v_129 = v_1[162] ;
int v_130 = v_1[163] ;
int v_131 = v_1[164] ;
int v_132 = v_1[165] ;
int v_133 = v_1[166] ;
int v_134 = v_1[169] ;
int v_135 = v_1[174] ;
int v_136 = v_1[177] ;
int v_137 = v_1[186] ;
int v_138 = v_1[189] ;
int v_139 = v_1[194] ;
int v_140 = v_1[197] ;
int v_141 = v_1[202] ;
int v_142 = v_1[205] ;
int v_143 = v_1[214] ;
int v_144 = v_1[217] ;
int v_145 = v_1[222] ;
int v_146 = v_1[225] ;
int v_147 = v_1[226] ;
int v_148 = v_1[227] ;
int v_149 = v_1[228] ;
int v_150 = v_1[229] ;
int v_151 = v_1[230] ;
int v_152 = v_1[233] ;
int v_153 = v_1[234] ;
int v_154 = v_1[235] ;
int v_155 = v_1[236] ;
int v_156 = v_1[239] ;
int v_157 = v_1[240] ;
int v_158 = v_1[241] ;
int v_159 = v_1[242] ;
int v_160 = v_1[245] ;
int v_161 = v_1[246] ;
int v_162 = v_1[247] ;
int v_163 = v_1[248] ;
int v_164 = v_1[249] ;
int v_165 = v_1[250] ;
int v_166 = v_1[258] ;
int v_167 = v_1[273] ;
int v_168 = v_1[286] ;
int v_169 = v_1[301] ;
int v_170 = v_1[314] ;
int v_171 = v_1[329] ;
int v_172 = v_1[342] ;
int v_173 = v_1[357] ;
int v_174 = v_1[370] ;
int v_175 = v_1[385] ;
int v_176 = v_1[398] ;
int v_177 = v_1[413] ;
int v_178 = v_1[426] ;
int v_179 = v_1[441] ;
int v_180 = v_1[454] ;
int v_181 = v_1[469] ;
int v_182 = v_1[482] ;
int v_183 = v_1[497] ;
int v_184 = v_1[510] ;
int v_185 = v_1[525] ;
int v_186 = v_1[538] ;
int v_187 = v_1[553] ;
int v_188 = v_1[561] ;
int v_189 = v_1[562] ;
int v_190 = v_1[563] ;
int v_191 = v_1[564] ;
int v_192 = v_1[565] ;
int v_193 = v_1[566] ;
int v_194 = v_1[567] ;
int v_195 = v_1[568] ;
int v_196 = v_1[569] ;
int v_197 = v_1[570] ;
int v_198 = v_1[571] ;
int v_199 = v_1[572] ;
int v_200 = v_1[575] ;
int v_201 = v_1[576] ;
int v_202 = v_1[577] ;
int v_203 = v_1[578] ;
int v_204 = v_1[579] ;
int v_205 = v_1[580] ;
int v_206 = v_1[581] ;
int v_207 = v_1[582] ;
int v_208 = v_1[583] ;
int v_209 = v_1[584] ;
int v_210 = v_1[585] ;
int v_211 = v_1[586] ;
int v_212 = v_1[589] ;
int v_213 = v_1[594] ;
int v_214 = v_1[600] ;
int v_215 = v_1[603] ;
int v_216 = v_1[609] ;
int v_217 = v_1[614] ;
int v_218 = v_1[617] ;
int v_219 = v_1[622] ;
int v_220 = v_1[628] ;
int v_221 = v_1[631] ;
int v_222 = v_1[637] ;
int v_223 = v_1[642] ;
int v_224 = v_1[646] ;
int v_225 = v_1[647] ;
int v_226 = v_1[650] ;
int v_227 = v_1[651] ;
int v_228 = v_1[652] ;
int v_229 = v_1[653] ;
int v_230 = v_1[654] ;
int v_231 = v_1[655] ;
int v_232 = v_1[656] ;
int v_233 = v_1[657] ;
int v_234 = v_1[658] ;
int v_235 = v_1[659] ;
int v_236 = v_1[660] ;
int v_237 = v_1[661] ;
int v_238 = v_1[662] ;
int v_239 = v_1[663] ;
int v_240 = v_1[664] ;
int v_241 = v_1[665] ;
int v_242 = v_1[668] ;
int v_243 = v_1[669] ;
int v_244 = v_1[675] ;
int v_245 = v_1[678] ;
int v_246 = v_1[681] ;
int v_247 = v_1[690] ;
int v_248 = v_1[693] ;
int v_249 = v_1[696] ;
int v_250 = v_1[703] ;
int v_251 = v_1[706] ;
int v_252 = v_1[709] ;
int v_253 = v_1[718] ;
int v_254 = v_1[721] ;
int v_255 = v_1[724] ;
int v_256 = v_1[729] ;
int v_257 = v_1[730] ;
int v_258 = v_1[731] ;
int v_259 = v_1[732] ;
int v_260 = v_1[733] ;
int v_261 = v_1[734] ;
int v_262 = v_1[737] ;
int v_263 = v_1[738] ;
int v_264 = v_1[739] ;
int v_265 = v_1[740] ;
int v_266 = v_1[743] ;
int v_267 = v_1[744] ;
int v_268 = v_1[745] ;
int v_269 = v_1[746] ;
int v_270 = v_1[749] ;
int v_271 = v_1[750] ;
int v_272 = v_1[751] ;
int v_273 = v_1[752] ;
int v_274 = v_1[753] ;
int v_275 = v_1[754] ;
int v_276 = v_1[757] ;
int v_277 = v_1[768] ;
int v_278 = v_1[771] ;
int v_279 = v_1[782] ;
int v_280 = v_1[785] ;
int v_281 = v_1[796] ;
int v_282 = v_1[799] ;
int v_283 = v_1[810] ;
int v_284 = v_1[813] ;
int v_285 = v_1[814] ;
int v_286 = v_1[815] ;
int v_287 = v_1[816] ;
int v_288 = v_1[817] ;
int v_289 = v_1[818] ;
int v_290 = v_1[819] ;
int v_291 = v_1[820] ;
int v_292 = v_1[821] ;
int v_293 = v_1[822] ;
int v_294 = v_1[823] ;
int v_295 = v_1[824] ;
int v_296 = v_1[825] ;
int v_297 = v_1[826] ;
int v_298 = v_1[827] ;
int v_299 = v_1[828] ;
int v_300 = v_1[829] ;
int v_301 = v_1[830] ;
int v_302 = v_1[831] ;
int v_303 = v_1[832] ;
int v_304 = v_1[833] ;
int v_305 = v_1[834] ;
int v_306 = v_1[835] ;
int v_307 = v_1[836] ;
int v_308 = v_1[837] ;
int v_309 = v_1[838] ;
int v_310 = v_1[85] ;
int v_311 = v_1[110] ;
int v_312 = v_1[645] ;
int v_313 = v_1[670] ;
int v_314 = v_34 ;
int v_315 = v_35 ;
int v_316 = v_1[(((v_41+round(sin(v_40)))*28)+(v_42+round(cos(v_40))))] ;
int v_317 = v_1[((v_41*28)+v_42)] ;
int v_318 = v_2 ;
int v_319 = v_1[(((v_41+round(sin((((v_63 == 6) && !((v_316 == 0) || (v_316 == 4))) ? v_40 : v_39))))*28)+(v_42+round(cos((((v_63 == 6) && !((v_316 == 0) || (v_316 == 4))) ? v_40 : v_39)))))] ;
int v_320 = v_1[(((v_46+round(sin(v_45)))*28)+(v_47+round(cos(v_45))))] ;
int v_321 = v_1[(((v_46+round(sin((v_45+1.5707964))))*28)+(v_47+round(cos((v_45+1.5707964)))))] ;
int v_322 = v_1[(((v_46+round(sin((v_45+4.712389))))*28)+(v_47+round(cos((v_45+4.712389)))))] ;
int v_323 = v_1[(((v_51+round(sin(v_50)))*28)+(v_52+round(cos(v_50))))] ;
int v_324 = v_1[(((v_51+round(sin((v_50+1.5707964))))*28)+(v_52+round(cos((v_50+1.5707964)))))] ;
int v_325 = v_1[(((v_51+round(sin((v_50+4.712389))))*28)+(v_52+round(cos((v_50+4.712389)))))] ;
int v_326 = v_1[(((v_56+round(sin(v_55)))*28)+(v_57+round(cos(v_55))))] ;
int v_327 = v_1[(((v_56+round(sin((v_55+1.5707964))))*28)+(v_57+round(cos((v_55+1.5707964)))))] ;
int v_328 = v_1[(((v_56+round(sin((v_55+4.712389))))*28)+(v_57+round(cos((v_55+4.712389)))))] ;
int v_329 = v_1[(((v_61+round(sin(v_60)))*28)+(v_62+round(cos(v_60))))] ;
int v_330 = v_1[(((v_61+round(sin((v_60+1.5707964))))*28)+(v_62+round(cos((v_60+1.5707964)))))] ;
int v_331 = v_1[(((v_61+round(sin((v_60+4.712389))))*28)+(v_62+round(cos((v_60+4.712389)))))] ;
int v_332 = v_2 ;
int v_333 = v_3 ;
int v_334 = v_4 ;
float v_335 = v_5 ;
float v_336 = v_6 ;
int v_337 = v_7 ;
int v_338 = v_8 ;
int v_339 = v_9 ;
int v_340 = v_10 ;
float v_341 = v_11 ;
int v_342 = v_12 ;
int v_343 = v_13 ;
int v_344 = v_14 ;
int v_345 = v_15 ;
float v_346 = v_16 ;
int v_347 = v_17 ;
int v_348 = v_18 ;
int v_349 = v_19 ;
int v_350 = v_20 ;
float v_351 = v_21 ;
int v_352 = v_22 ;
int v_353 = v_23 ;
int v_354 = v_24 ;
int v_355 = v_25 ;
float v_356 = v_26 ;
int v_357 = v_27 ;
int v_358 = v_28 ;
int v_359 = v_29 ;
boolean v_360 = v_30 ;
int v_361 = v_31 ;
boolean v_362 = v_32 ;
boolean v_363 = v_33 ;
boolean v_364 = v_36 ;
boolean v_365 = v_36 ;
boolean v_366 = v_36 ;
boolean v_367 = v_36 ;

void setup() {
   frameRate(35) ;
}
void draw() {
   size(screenWidth, screenHeight) ;
   background(0, 0, 0, 255) ;
   translate((screenWidth/2.0), (screenHeight/2.0)) ;
   v_37 = v_3 ;
   v_38 = v_4 ;
   v_39 = v_5 ;
   v_40 = v_6 ;
   v_41 = v_7 ;
   v_42 = v_8 ;
   v_43 = v_9 ;
   v_44 = v_10 ;
   v_45 = v_11 ;
   v_46 = v_12 ;
   v_47 = v_13 ;
   v_48 = v_14 ;
   v_49 = v_15 ;
   v_50 = v_16 ;
   v_51 = v_17 ;
   v_52 = v_18 ;
   v_53 = v_19 ;
   v_54 = v_20 ;
   v_55 = v_21 ;
   v_56 = v_22 ;
   v_57 = v_23 ;
   v_58 = v_24 ;
   v_59 = v_25 ;
   v_60 = v_26 ;
   v_61 = v_27 ;
   v_62 = v_28 ;
   v_63 = v_29 ;
   v_64 = v_30 ;
   v_65 = v_31 ;
   v_66 = v_32 ;
   v_67 = v_33 ;
   translate(-263.5, -238.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(17.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(102.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(204.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(255.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(357.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(442.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 0.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 17.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 17.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 17.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 17.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 34.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 51.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 68.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 85.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 85.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(204.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(255.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 102.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(204.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(255.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 119.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 136.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 136.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 136.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 136.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 136.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 136.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 136.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 136.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(17.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(442.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 153.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 170.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 187.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 187.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 187.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 187.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 187.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 187.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 204.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 221.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 238.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 238.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 238.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 238.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 238.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 238.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 238.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 238.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 255.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(204.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(255.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 272.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 289.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 289.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 289.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 289.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 289.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 289.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(204.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(255.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 306.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(17.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(204.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(255.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(442.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 323.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 340.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 340.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 340.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 340.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 357.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 374.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 391.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 391.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 391.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 391.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 391.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 391.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(17.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(204.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(255.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(442.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 408.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(17.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(204.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(255.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(442.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 425.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 442.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 442.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 442.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 442.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 442.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 442.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 442.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 442.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(102.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(357.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 459.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(102.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(357.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 476.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 493.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 493.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(0.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(17.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(34.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(51.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(68.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(85.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(102.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(119.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(136.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(153.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(170.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(187.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(204.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(221.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(238.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(255.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(272.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(289.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(306.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(323.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(340.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(357.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(374.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(391.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(408.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(425.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(442.0, 510.0, 17.0, 17.0) ;
   stroke(0, 0, 255, 255) ;
   fill(0, 0, 255, 255) ;
   rect(459.0, 510.0, 17.0, 17.0) ;
   stroke(255, 192, 203, 255) ;
   fill(255, 192, 203, 255) ;
   rect(204.0, 204.0, 17.0, 17.0) ;
   stroke(255, 192, 203, 255) ;
   fill(255, 192, 203, 255) ;
   rect(255.0, 204.0, 17.0, 17.0) ;
   v_68 = v_1[29] ;
   if((v_68 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 25.5, 3.4, 3.4) ;
      } 
   v_69 = v_1[30] ;
   if((v_69 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(42.5, 25.5, 3.4, 3.4) ;
      } 
   v_70 = v_1[31] ;
   if((v_70 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(59.5, 25.5, 3.4, 3.4) ;
      } 
   v_71 = v_1[32] ;
   if((v_71 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(76.5, 25.5, 3.4, 3.4) ;
      } 
   v_72 = v_1[33] ;
   if((v_72 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(93.5, 25.5, 3.4, 3.4) ;
      } 
   v_73 = v_1[34] ;
   if((v_73 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 25.5, 3.4, 3.4) ;
      } 
   v_74 = v_1[35] ;
   if((v_74 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(127.5, 25.5, 3.4, 3.4) ;
      } 
   v_75 = v_1[36] ;
   if((v_75 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(144.5, 25.5, 3.4, 3.4) ;
      } 
   v_76 = v_1[37] ;
   if((v_76 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 25.5, 3.4, 3.4) ;
      } 
   v_77 = v_1[38] ;
   if((v_77 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(178.5, 25.5, 3.4, 3.4) ;
      } 
   v_78 = v_1[39] ;
   if((v_78 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(195.5, 25.5, 3.4, 3.4) ;
      } 
   v_79 = v_1[40] ;
   if((v_79 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 25.5, 3.4, 3.4) ;
      } 
   v_80 = v_1[43] ;
   if((v_80 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 25.5, 3.4, 3.4) ;
      } 
   v_81 = v_1[44] ;
   if((v_81 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(280.5, 25.5, 3.4, 3.4) ;
      } 
   v_82 = v_1[45] ;
   if((v_82 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(297.5, 25.5, 3.4, 3.4) ;
      } 
   v_83 = v_1[46] ;
   if((v_83 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 25.5, 3.4, 3.4) ;
      } 
   v_84 = v_1[47] ;
   if((v_84 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(331.5, 25.5, 3.4, 3.4) ;
      } 
   v_85 = v_1[48] ;
   if((v_85 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(348.5, 25.5, 3.4, 3.4) ;
      } 
   v_86 = v_1[49] ;
   if((v_86 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 25.5, 3.4, 3.4) ;
      } 
   v_87 = v_1[50] ;
   if((v_87 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(382.5, 25.5, 3.4, 3.4) ;
      } 
   v_88 = v_1[51] ;
   if((v_88 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(399.5, 25.5, 3.4, 3.4) ;
      } 
   v_89 = v_1[52] ;
   if((v_89 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(416.5, 25.5, 3.4, 3.4) ;
      } 
   v_90 = v_1[53] ;
   if((v_90 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(433.5, 25.5, 3.4, 3.4) ;
      } 
   v_91 = v_1[54] ;
   if((v_91 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 25.5, 3.4, 3.4) ;
      } 
   v_92 = v_1[57] ;
   if((v_92 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 42.5, 3.4, 3.4) ;
      } 
   v_93 = v_1[62] ;
   if((v_93 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 42.5, 3.4, 3.4) ;
      } 
   v_94 = v_1[68] ;
   if((v_94 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 42.5, 3.4, 3.4) ;
      } 
   v_95 = v_1[71] ;
   if((v_95 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 42.5, 3.4, 3.4) ;
      } 
   v_96 = v_1[77] ;
   if((v_96 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 42.5, 3.4, 3.4) ;
      } 
   v_97 = v_1[82] ;
   if((v_97 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 42.5, 3.4, 3.4) ;
      } 
   v_98 = v_1[90] ;
   if((v_98 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 59.5, 3.4, 3.4) ;
      } 
   v_99 = v_1[96] ;
   if((v_99 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 59.5, 3.4, 3.4) ;
      } 
   v_100 = v_1[99] ;
   if((v_100 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 59.5, 3.4, 3.4) ;
      } 
   v_101 = v_1[105] ;
   if((v_101 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 59.5, 3.4, 3.4) ;
      } 
   v_102 = v_1[113] ;
   if((v_102 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 76.5, 3.4, 3.4) ;
      } 
   v_103 = v_1[118] ;
   if((v_103 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 76.5, 3.4, 3.4) ;
      } 
   v_104 = v_1[124] ;
   if((v_104 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 76.5, 3.4, 3.4) ;
      } 
   v_105 = v_1[127] ;
   if((v_105 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 76.5, 3.4, 3.4) ;
      } 
   v_106 = v_1[133] ;
   if((v_106 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 76.5, 3.4, 3.4) ;
      } 
   v_107 = v_1[138] ;
   if((v_107 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 76.5, 3.4, 3.4) ;
      } 
   v_108 = v_1[141] ;
   if((v_108 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 93.5, 3.4, 3.4) ;
      } 
   v_109 = v_1[142] ;
   if((v_109 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(42.5, 93.5, 3.4, 3.4) ;
      } 
   v_110 = v_1[143] ;
   if((v_110 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(59.5, 93.5, 3.4, 3.4) ;
      } 
   v_111 = v_1[144] ;
   if((v_111 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(76.5, 93.5, 3.4, 3.4) ;
      } 
   v_112 = v_1[145] ;
   if((v_112 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(93.5, 93.5, 3.4, 3.4) ;
      } 
   v_113 = v_1[146] ;
   if((v_113 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 93.5, 3.4, 3.4) ;
      } 
   v_114 = v_1[147] ;
   if((v_114 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(127.5, 93.5, 3.4, 3.4) ;
      } 
   v_115 = v_1[148] ;
   if((v_115 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(144.5, 93.5, 3.4, 3.4) ;
      } 
   v_116 = v_1[149] ;
   if((v_116 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 93.5, 3.4, 3.4) ;
      } 
   v_117 = v_1[150] ;
   if((v_117 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(178.5, 93.5, 3.4, 3.4) ;
      } 
   v_118 = v_1[151] ;
   if((v_118 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(195.5, 93.5, 3.4, 3.4) ;
      } 
   v_119 = v_1[152] ;
   if((v_119 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 93.5, 3.4, 3.4) ;
      } 
   v_120 = v_1[153] ;
   if((v_120 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(229.5, 93.5, 3.4, 3.4) ;
      } 
   v_121 = v_1[154] ;
   if((v_121 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(246.5, 93.5, 3.4, 3.4) ;
      } 
   v_122 = v_1[155] ;
   if((v_122 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 93.5, 3.4, 3.4) ;
      } 
   v_123 = v_1[156] ;
   if((v_123 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(280.5, 93.5, 3.4, 3.4) ;
      } 
   v_124 = v_1[157] ;
   if((v_124 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(297.5, 93.5, 3.4, 3.4) ;
      } 
   v_125 = v_1[158] ;
   if((v_125 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 93.5, 3.4, 3.4) ;
      } 
   v_126 = v_1[159] ;
   if((v_126 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(331.5, 93.5, 3.4, 3.4) ;
      } 
   v_127 = v_1[160] ;
   if((v_127 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(348.5, 93.5, 3.4, 3.4) ;
      } 
   v_128 = v_1[161] ;
   if((v_128 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 93.5, 3.4, 3.4) ;
      } 
   v_129 = v_1[162] ;
   if((v_129 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(382.5, 93.5, 3.4, 3.4) ;
      } 
   v_130 = v_1[163] ;
   if((v_130 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(399.5, 93.5, 3.4, 3.4) ;
      } 
   v_131 = v_1[164] ;
   if((v_131 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(416.5, 93.5, 3.4, 3.4) ;
      } 
   v_132 = v_1[165] ;
   if((v_132 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(433.5, 93.5, 3.4, 3.4) ;
      } 
   v_133 = v_1[166] ;
   if((v_133 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 93.5, 3.4, 3.4) ;
      } 
   v_134 = v_1[169] ;
   if((v_134 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 110.5, 3.4, 3.4) ;
      } 
   v_135 = v_1[174] ;
   if((v_135 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 110.5, 3.4, 3.4) ;
      } 
   v_136 = v_1[177] ;
   if((v_136 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 110.5, 3.4, 3.4) ;
      } 
   v_137 = v_1[186] ;
   if((v_137 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 110.5, 3.4, 3.4) ;
      } 
   v_138 = v_1[189] ;
   if((v_138 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 110.5, 3.4, 3.4) ;
      } 
   v_139 = v_1[194] ;
   if((v_139 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 110.5, 3.4, 3.4) ;
      } 
   v_140 = v_1[197] ;
   if((v_140 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 127.5, 3.4, 3.4) ;
      } 
   v_141 = v_1[202] ;
   if((v_141 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 127.5, 3.4, 3.4) ;
      } 
   v_142 = v_1[205] ;
   if((v_142 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 127.5, 3.4, 3.4) ;
      } 
   v_143 = v_1[214] ;
   if((v_143 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 127.5, 3.4, 3.4) ;
      } 
   v_144 = v_1[217] ;
   if((v_144 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 127.5, 3.4, 3.4) ;
      } 
   v_145 = v_1[222] ;
   if((v_145 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 127.5, 3.4, 3.4) ;
      } 
   v_146 = v_1[225] ;
   if((v_146 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 144.5, 3.4, 3.4) ;
      } 
   v_147 = v_1[226] ;
   if((v_147 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(42.5, 144.5, 3.4, 3.4) ;
      } 
   v_148 = v_1[227] ;
   if((v_148 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(59.5, 144.5, 3.4, 3.4) ;
      } 
   v_149 = v_1[228] ;
   if((v_149 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(76.5, 144.5, 3.4, 3.4) ;
      } 
   v_150 = v_1[229] ;
   if((v_150 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(93.5, 144.5, 3.4, 3.4) ;
      } 
   v_151 = v_1[230] ;
   if((v_151 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 144.5, 3.4, 3.4) ;
      } 
   v_152 = v_1[233] ;
   if((v_152 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 144.5, 3.4, 3.4) ;
      } 
   v_153 = v_1[234] ;
   if((v_153 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(178.5, 144.5, 3.4, 3.4) ;
      } 
   v_154 = v_1[235] ;
   if((v_154 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(195.5, 144.5, 3.4, 3.4) ;
      } 
   v_155 = v_1[236] ;
   if((v_155 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 144.5, 3.4, 3.4) ;
      } 
   v_156 = v_1[239] ;
   if((v_156 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 144.5, 3.4, 3.4) ;
      } 
   v_157 = v_1[240] ;
   if((v_157 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(280.5, 144.5, 3.4, 3.4) ;
      } 
   v_158 = v_1[241] ;
   if((v_158 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(297.5, 144.5, 3.4, 3.4) ;
      } 
   v_159 = v_1[242] ;
   if((v_159 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 144.5, 3.4, 3.4) ;
      } 
   v_160 = v_1[245] ;
   if((v_160 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 144.5, 3.4, 3.4) ;
      } 
   v_161 = v_1[246] ;
   if((v_161 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(382.5, 144.5, 3.4, 3.4) ;
      } 
   v_162 = v_1[247] ;
   if((v_162 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(399.5, 144.5, 3.4, 3.4) ;
      } 
   v_163 = v_1[248] ;
   if((v_163 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(416.5, 144.5, 3.4, 3.4) ;
      } 
   v_164 = v_1[249] ;
   if((v_164 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(433.5, 144.5, 3.4, 3.4) ;
      } 
   v_165 = v_1[250] ;
   if((v_165 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 144.5, 3.4, 3.4) ;
      } 
   v_166 = v_1[258] ;
   if((v_166 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 161.5, 3.4, 3.4) ;
      } 
   v_167 = v_1[273] ;
   if((v_167 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 161.5, 3.4, 3.4) ;
      } 
   v_168 = v_1[286] ;
   if((v_168 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 178.5, 3.4, 3.4) ;
      } 
   v_169 = v_1[301] ;
   if((v_169 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 178.5, 3.4, 3.4) ;
      } 
   v_170 = v_1[314] ;
   if((v_170 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 195.5, 3.4, 3.4) ;
      } 
   v_171 = v_1[329] ;
   if((v_171 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 195.5, 3.4, 3.4) ;
      } 
   v_172 = v_1[342] ;
   if((v_172 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 212.5, 3.4, 3.4) ;
      } 
   v_173 = v_1[357] ;
   if((v_173 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 212.5, 3.4, 3.4) ;
      } 
   v_174 = v_1[370] ;
   if((v_174 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 229.5, 3.4, 3.4) ;
      } 
   v_175 = v_1[385] ;
   if((v_175 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 229.5, 3.4, 3.4) ;
      } 
   v_176 = v_1[398] ;
   if((v_176 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 246.5, 3.4, 3.4) ;
      } 
   v_177 = v_1[413] ;
   if((v_177 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 246.5, 3.4, 3.4) ;
      } 
   v_178 = v_1[426] ;
   if((v_178 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 263.5, 3.4, 3.4) ;
      } 
   v_179 = v_1[441] ;
   if((v_179 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 263.5, 3.4, 3.4) ;
      } 
   v_180 = v_1[454] ;
   if((v_180 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 280.5, 3.4, 3.4) ;
      } 
   v_181 = v_1[469] ;
   if((v_181 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 280.5, 3.4, 3.4) ;
      } 
   v_182 = v_1[482] ;
   if((v_182 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 297.5, 3.4, 3.4) ;
      } 
   v_183 = v_1[497] ;
   if((v_183 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 297.5, 3.4, 3.4) ;
      } 
   v_184 = v_1[510] ;
   if((v_184 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 314.5, 3.4, 3.4) ;
      } 
   v_185 = v_1[525] ;
   if((v_185 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 314.5, 3.4, 3.4) ;
      } 
   v_186 = v_1[538] ;
   if((v_186 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 331.5, 3.4, 3.4) ;
      } 
   v_187 = v_1[553] ;
   if((v_187 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 331.5, 3.4, 3.4) ;
      } 
   v_188 = v_1[561] ;
   if((v_188 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 348.5, 3.4, 3.4) ;
      } 
   v_189 = v_1[562] ;
   if((v_189 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(42.5, 348.5, 3.4, 3.4) ;
      } 
   v_190 = v_1[563] ;
   if((v_190 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(59.5, 348.5, 3.4, 3.4) ;
      } 
   v_191 = v_1[564] ;
   if((v_191 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(76.5, 348.5, 3.4, 3.4) ;
      } 
   v_192 = v_1[565] ;
   if((v_192 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(93.5, 348.5, 3.4, 3.4) ;
      } 
   v_193 = v_1[566] ;
   if((v_193 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 348.5, 3.4, 3.4) ;
      } 
   v_194 = v_1[567] ;
   if((v_194 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(127.5, 348.5, 3.4, 3.4) ;
      } 
   v_195 = v_1[568] ;
   if((v_195 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(144.5, 348.5, 3.4, 3.4) ;
      } 
   v_196 = v_1[569] ;
   if((v_196 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 348.5, 3.4, 3.4) ;
      } 
   v_197 = v_1[570] ;
   if((v_197 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(178.5, 348.5, 3.4, 3.4) ;
      } 
   v_198 = v_1[571] ;
   if((v_198 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(195.5, 348.5, 3.4, 3.4) ;
      } 
   v_199 = v_1[572] ;
   if((v_199 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 348.5, 3.4, 3.4) ;
      } 
   v_200 = v_1[575] ;
   if((v_200 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 348.5, 3.4, 3.4) ;
      } 
   v_201 = v_1[576] ;
   if((v_201 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(280.5, 348.5, 3.4, 3.4) ;
      } 
   v_202 = v_1[577] ;
   if((v_202 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(297.5, 348.5, 3.4, 3.4) ;
      } 
   v_203 = v_1[578] ;
   if((v_203 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 348.5, 3.4, 3.4) ;
      } 
   v_204 = v_1[579] ;
   if((v_204 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(331.5, 348.5, 3.4, 3.4) ;
      } 
   v_205 = v_1[580] ;
   if((v_205 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(348.5, 348.5, 3.4, 3.4) ;
      } 
   v_206 = v_1[581] ;
   if((v_206 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 348.5, 3.4, 3.4) ;
      } 
   v_207 = v_1[582] ;
   if((v_207 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(382.5, 348.5, 3.4, 3.4) ;
      } 
   v_208 = v_1[583] ;
   if((v_208 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(399.5, 348.5, 3.4, 3.4) ;
      } 
   v_209 = v_1[584] ;
   if((v_209 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(416.5, 348.5, 3.4, 3.4) ;
      } 
   v_210 = v_1[585] ;
   if((v_210 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(433.5, 348.5, 3.4, 3.4) ;
      } 
   v_211 = v_1[586] ;
   if((v_211 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 348.5, 3.4, 3.4) ;
      } 
   v_212 = v_1[589] ;
   if((v_212 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 365.5, 3.4, 3.4) ;
      } 
   v_213 = v_1[594] ;
   if((v_213 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 365.5, 3.4, 3.4) ;
      } 
   v_214 = v_1[600] ;
   if((v_214 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 365.5, 3.4, 3.4) ;
      } 
   v_215 = v_1[603] ;
   if((v_215 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 365.5, 3.4, 3.4) ;
      } 
   v_216 = v_1[609] ;
   if((v_216 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 365.5, 3.4, 3.4) ;
      } 
   v_217 = v_1[614] ;
   if((v_217 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 365.5, 3.4, 3.4) ;
      } 
   v_218 = v_1[617] ;
   if((v_218 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 382.5, 3.4, 3.4) ;
      } 
   v_219 = v_1[622] ;
   if((v_219 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 382.5, 3.4, 3.4) ;
      } 
   v_220 = v_1[628] ;
   if((v_220 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 382.5, 3.4, 3.4) ;
      } 
   v_221 = v_1[631] ;
   if((v_221 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 382.5, 3.4, 3.4) ;
      } 
   v_222 = v_1[637] ;
   if((v_222 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 382.5, 3.4, 3.4) ;
      } 
   v_223 = v_1[642] ;
   if((v_223 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 382.5, 3.4, 3.4) ;
      } 
   v_224 = v_1[646] ;
   if((v_224 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(42.5, 399.5, 3.4, 3.4) ;
      } 
   v_225 = v_1[647] ;
   if((v_225 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(59.5, 399.5, 3.4, 3.4) ;
      } 
   v_226 = v_1[650] ;
   if((v_226 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 399.5, 3.4, 3.4) ;
      } 
   v_227 = v_1[651] ;
   if((v_227 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(127.5, 399.5, 3.4, 3.4) ;
      } 
   v_228 = v_1[652] ;
   if((v_228 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(144.5, 399.5, 3.4, 3.4) ;
      } 
   v_229 = v_1[653] ;
   if((v_229 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 399.5, 3.4, 3.4) ;
      } 
   v_230 = v_1[654] ;
   if((v_230 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(178.5, 399.5, 3.4, 3.4) ;
      } 
   v_231 = v_1[655] ;
   if((v_231 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(195.5, 399.5, 3.4, 3.4) ;
      } 
   v_232 = v_1[656] ;
   if((v_232 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 399.5, 3.4, 3.4) ;
      } 
   v_233 = v_1[657] ;
   if((v_233 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(229.5, 399.5, 3.4, 3.4) ;
      } 
   v_234 = v_1[658] ;
   if((v_234 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(246.5, 399.5, 3.4, 3.4) ;
      } 
   v_235 = v_1[659] ;
   if((v_235 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 399.5, 3.4, 3.4) ;
      } 
   v_236 = v_1[660] ;
   if((v_236 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(280.5, 399.5, 3.4, 3.4) ;
      } 
   v_237 = v_1[661] ;
   if((v_237 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(297.5, 399.5, 3.4, 3.4) ;
      } 
   v_238 = v_1[662] ;
   if((v_238 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 399.5, 3.4, 3.4) ;
      } 
   v_239 = v_1[663] ;
   if((v_239 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(331.5, 399.5, 3.4, 3.4) ;
      } 
   v_240 = v_1[664] ;
   if((v_240 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(348.5, 399.5, 3.4, 3.4) ;
      } 
   v_241 = v_1[665] ;
   if((v_241 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 399.5, 3.4, 3.4) ;
      } 
   v_242 = v_1[668] ;
   if((v_242 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(416.5, 399.5, 3.4, 3.4) ;
      } 
   v_243 = v_1[669] ;
   if((v_243 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(433.5, 399.5, 3.4, 3.4) ;
      } 
   v_244 = v_1[675] ;
   if((v_244 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(59.5, 416.5, 3.4, 3.4) ;
      } 
   v_245 = v_1[678] ;
   if((v_245 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 416.5, 3.4, 3.4) ;
      } 
   v_246 = v_1[681] ;
   if((v_246 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 416.5, 3.4, 3.4) ;
      } 
   v_247 = v_1[690] ;
   if((v_247 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 416.5, 3.4, 3.4) ;
      } 
   v_248 = v_1[693] ;
   if((v_248 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 416.5, 3.4, 3.4) ;
      } 
   v_249 = v_1[696] ;
   if((v_249 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(416.5, 416.5, 3.4, 3.4) ;
      } 
   v_250 = v_1[703] ;
   if((v_250 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(59.5, 433.5, 3.4, 3.4) ;
      } 
   v_251 = v_1[706] ;
   if((v_251 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 433.5, 3.4, 3.4) ;
      } 
   v_252 = v_1[709] ;
   if((v_252 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 433.5, 3.4, 3.4) ;
      } 
   v_253 = v_1[718] ;
   if((v_253 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 433.5, 3.4, 3.4) ;
      } 
   v_254 = v_1[721] ;
   if((v_254 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 433.5, 3.4, 3.4) ;
      } 
   v_255 = v_1[724] ;
   if((v_255 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(416.5, 433.5, 3.4, 3.4) ;
      } 
   v_256 = v_1[729] ;
   if((v_256 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 450.5, 3.4, 3.4) ;
      } 
   v_257 = v_1[730] ;
   if((v_257 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(42.5, 450.5, 3.4, 3.4) ;
      } 
   v_258 = v_1[731] ;
   if((v_258 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(59.5, 450.5, 3.4, 3.4) ;
      } 
   v_259 = v_1[732] ;
   if((v_259 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(76.5, 450.5, 3.4, 3.4) ;
      } 
   v_260 = v_1[733] ;
   if((v_260 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(93.5, 450.5, 3.4, 3.4) ;
      } 
   v_261 = v_1[734] ;
   if((v_261 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 450.5, 3.4, 3.4) ;
      } 
   v_262 = v_1[737] ;
   if((v_262 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 450.5, 3.4, 3.4) ;
      } 
   v_263 = v_1[738] ;
   if((v_263 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(178.5, 450.5, 3.4, 3.4) ;
      } 
   v_264 = v_1[739] ;
   if((v_264 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(195.5, 450.5, 3.4, 3.4) ;
      } 
   v_265 = v_1[740] ;
   if((v_265 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 450.5, 3.4, 3.4) ;
      } 
   v_266 = v_1[743] ;
   if((v_266 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 450.5, 3.4, 3.4) ;
      } 
   v_267 = v_1[744] ;
   if((v_267 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(280.5, 450.5, 3.4, 3.4) ;
      } 
   v_268 = v_1[745] ;
   if((v_268 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(297.5, 450.5, 3.4, 3.4) ;
      } 
   v_269 = v_1[746] ;
   if((v_269 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 450.5, 3.4, 3.4) ;
      } 
   v_270 = v_1[749] ;
   if((v_270 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 450.5, 3.4, 3.4) ;
      } 
   v_271 = v_1[750] ;
   if((v_271 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(382.5, 450.5, 3.4, 3.4) ;
      } 
   v_272 = v_1[751] ;
   if((v_272 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(399.5, 450.5, 3.4, 3.4) ;
      } 
   v_273 = v_1[752] ;
   if((v_273 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(416.5, 450.5, 3.4, 3.4) ;
      } 
   v_274 = v_1[753] ;
   if((v_274 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(433.5, 450.5, 3.4, 3.4) ;
      } 
   v_275 = v_1[754] ;
   if((v_275 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 450.5, 3.4, 3.4) ;
      } 
   v_276 = v_1[757] ;
   if((v_276 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 467.5, 3.4, 3.4) ;
      } 
   v_277 = v_1[768] ;
   if((v_277 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 467.5, 3.4, 3.4) ;
      } 
   v_278 = v_1[771] ;
   if((v_278 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 467.5, 3.4, 3.4) ;
      } 
   v_279 = v_1[782] ;
   if((v_279 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 467.5, 3.4, 3.4) ;
      } 
   v_280 = v_1[785] ;
   if((v_280 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 484.5, 3.4, 3.4) ;
      } 
   v_281 = v_1[796] ;
   if((v_281 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 484.5, 3.4, 3.4) ;
      } 
   v_282 = v_1[799] ;
   if((v_282 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 484.5, 3.4, 3.4) ;
      } 
   v_283 = v_1[810] ;
   if((v_283 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 484.5, 3.4, 3.4) ;
      } 
   v_284 = v_1[813] ;
   if((v_284 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(25.5, 501.5, 3.4, 3.4) ;
      } 
   v_285 = v_1[814] ;
   if((v_285 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(42.5, 501.5, 3.4, 3.4) ;
      } 
   v_286 = v_1[815] ;
   if((v_286 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(59.5, 501.5, 3.4, 3.4) ;
      } 
   v_287 = v_1[816] ;
   if((v_287 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(76.5, 501.5, 3.4, 3.4) ;
      } 
   v_288 = v_1[817] ;
   if((v_288 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(93.5, 501.5, 3.4, 3.4) ;
      } 
   v_289 = v_1[818] ;
   if((v_289 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(110.5, 501.5, 3.4, 3.4) ;
      } 
   v_290 = v_1[819] ;
   if((v_290 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(127.5, 501.5, 3.4, 3.4) ;
      } 
   v_291 = v_1[820] ;
   if((v_291 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(144.5, 501.5, 3.4, 3.4) ;
      } 
   v_292 = v_1[821] ;
   if((v_292 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(161.5, 501.5, 3.4, 3.4) ;
      } 
   v_293 = v_1[822] ;
   if((v_293 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(178.5, 501.5, 3.4, 3.4) ;
      } 
   v_294 = v_1[823] ;
   if((v_294 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(195.5, 501.5, 3.4, 3.4) ;
      } 
   v_295 = v_1[824] ;
   if((v_295 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(212.5, 501.5, 3.4, 3.4) ;
      } 
   v_296 = v_1[825] ;
   if((v_296 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(229.5, 501.5, 3.4, 3.4) ;
      } 
   v_297 = v_1[826] ;
   if((v_297 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(246.5, 501.5, 3.4, 3.4) ;
      } 
   v_298 = v_1[827] ;
   if((v_298 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(263.5, 501.5, 3.4, 3.4) ;
      } 
   v_299 = v_1[828] ;
   if((v_299 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(280.5, 501.5, 3.4, 3.4) ;
      } 
   v_300 = v_1[829] ;
   if((v_300 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(297.5, 501.5, 3.4, 3.4) ;
      } 
   v_301 = v_1[830] ;
   if((v_301 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(314.5, 501.5, 3.4, 3.4) ;
      } 
   v_302 = v_1[831] ;
   if((v_302 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(331.5, 501.5, 3.4, 3.4) ;
      } 
   v_303 = v_1[832] ;
   if((v_303 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(348.5, 501.5, 3.4, 3.4) ;
      } 
   v_304 = v_1[833] ;
   if((v_304 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(365.5, 501.5, 3.4, 3.4) ;
      } 
   v_305 = v_1[834] ;
   if((v_305 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(382.5, 501.5, 3.4, 3.4) ;
      } 
   v_306 = v_1[835] ;
   if((v_306 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(399.5, 501.5, 3.4, 3.4) ;
      } 
   v_307 = v_1[836] ;
   if((v_307 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(416.5, 501.5, 3.4, 3.4) ;
      } 
   v_308 = v_1[837] ;
   if((v_308 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(433.5, 501.5, 3.4, 3.4) ;
      } 
   v_309 = v_1[838] ;
   if((v_309 == 1)) {
      stroke(240, 240, 255, 255) ;
      fill(240, 240, 255, 255) ;
      ellipse(450.5, 501.5, 3.4, 3.4) ;
      } 
   v_310 = v_1[85] ;
   if((v_310 == 2)) {
      stroke(255, 255, 0, 255) ;
      fill(255, 255, 0, 255) ;
      ellipse(25.5, 59.5, 6.8, 6.8) ;
      } 
   v_311 = v_1[110] ;
   if((v_311 == 2)) {
      stroke(255, 255, 0, 255) ;
      fill(255, 255, 0, 255) ;
      ellipse(450.5, 59.5, 6.8, 6.8) ;
      } 
   v_312 = v_1[645] ;
   if((v_312 == 2)) {
      stroke(255, 255, 0, 255) ;
      fill(255, 255, 0, 255) ;
      ellipse(25.5, 399.5, 6.8, 6.8) ;
      } 
   v_313 = v_1[670] ;
   if((v_313 == 2)) {
      stroke(255, 255, 0, 255) ;
      fill(255, 255, 0, 255) ;
      ellipse(450.5, 399.5, 6.8, 6.8) ;
      } 
   fill(255, 255, 255, 255) ;
   text("Use Arrow keys to move. Yellow dots will make ghosts not follow you for a few seconds.",
        0.0, -17.0, 500.0, 200.0) ;
   if(v_64) {
      v_1[348] = 0 ;
      v_1[351] = 0 ;
      } 
   stroke(255, 0, 0, 255) ;
   fill(255, 0, 0, 255) ;
   // Substitution Optimization settings.
   subs_1 = (1.0-(v_63/6.0)) ;
   subs_2 = ((subs_1*((v_43*17.0)+8.5))+((v_63/6.0)*((v_46*17.0)+8.5))) ;
   subs_3 = ((subs_1*((v_44*17.0)+8.5))+((v_63/6.0)*((v_47*17.0)+8.5))) ;
   subs_4 = ((subs_1*((v_48*17.0)+8.5))+((v_63/6.0)*((v_51*17.0)+8.5))) ;
   subs_5 = ((subs_1*((v_49*17.0)+8.5))+((v_63/6.0)*((v_52*17.0)+8.5))) ;
   subs_6 = ((subs_1*((v_53*17.0)+8.5))+((v_63/6.0)*((v_56*17.0)+8.5))) ;
   subs_7 = ((subs_1*((v_54*17.0)+8.5))+((v_63/6.0)*((v_57*17.0)+8.5))) ;
   subs_8 = ((subs_1*((v_58*17.0)+8.5))+((v_63/6.0)*((v_61*17.0)+8.5))) ;
   subs_9 = ((subs_1*((v_59*17.0)+8.5))+((v_63/6.0)*((v_62*17.0)+8.5))) ;
   subs_10 = ((subs_2+8.5)+-17.0) ;
   subs_11 = ((subs_3+-8.5)+17.0) ;
   subs_12 = ((subs_4+8.5)+-17.0) ;
   subs_13 = ((subs_5+-8.5)+17.0) ;
   subs_14 = ((subs_6+8.5)+-17.0) ;
   subs_15 = ((subs_7+-8.5)+17.0) ;
   subs_16 = ((subs_8+8.5)+-17.0) ;
   subs_17 = ((subs_9+-8.5)+17.0) ;
   subs_18 = (1.4166666*sin(v_45)) ;
   subs_19 = (1.4166666*sin(v_50)) ;
   subs_20 = (1.4166666*sin(v_55)) ;
   subs_21 = (1.4166666*sin(v_60)) ;
   subs_22 = (1.4166666*cos(v_45)) ;
   subs_23 = (1.4166666*cos(v_50)) ;
   subs_24 = (1.4166666*cos(v_55)) ;
   subs_25 = (1.4166666*cos(v_60)) ;
   subs_26 = -(subs_2+-2.8333333) ;
   subs_27 = -(subs_4+-2.8333333) ;
   subs_28 = -(subs_6+-2.8333333) ;
   subs_29 = -(subs_8+-2.8333333) ;
   //  
   bezier((subs_3+-8.5), (subs_2+8.5), (subs_3+-8.5), subs_10, subs_11, subs_10,
          subs_11, (subs_2+8.5)) ;
   stroke(255, 255, 255, 255) ;
   fill(255, 255, 255, 255) ;
   translate((subs_3+-4.25), (subs_2+-2.8333333)) ;
   ellipse(0.0, 0.0, 5.6666665, 5.6666665) ;
   stroke(0, 0, 0, 255) ;
   fill(0, 0, 0, 255) ;
   ellipse(subs_22, subs_18, 2.8333333, 2.8333333) ;
   translate(-(subs_3+-4.25), subs_26) ;
   stroke(255, 255, 255, 255) ;
   fill(255, 255, 255, 255) ;
   translate((subs_3+4.25), (subs_2+-2.8333333)) ;
   ellipse(0.0, 0.0, 5.6666665, 5.6666665) ;
   stroke(0, 0, 0, 255) ;
   fill(0, 0, 0, 255) ;
   ellipse(subs_22, subs_18, 2.8333333, 2.8333333) ;
   translate(-(subs_3+4.25), subs_26) ;
   stroke(255, 184, 255, 255) ;
   fill(255, 184, 255, 255) ;
   bezier((subs_5+-8.5), (subs_4+8.5), (subs_5+-8.5), subs_12, subs_13, subs_12,
          subs_13, (subs_4+8.5)) ;
   stroke(255, 255, 255, 255) ;
   fill(255, 255, 255, 255) ;
   translate((subs_5+-4.25), (subs_4+-2.8333333)) ;
   ellipse(0.0, 0.0, 5.6666665, 5.6666665) ;
   stroke(0, 0, 0, 255) ;
   fill(0, 0, 0, 255) ;
   ellipse(subs_23, subs_19, 2.8333333, 2.8333333) ;
   translate(-(subs_5+-4.25), subs_27) ;
   stroke(255, 255, 255, 255) ;
   fill(255, 255, 255, 255) ;
   translate((subs_5+4.25), (subs_4+-2.8333333)) ;
   ellipse(0.0, 0.0, 5.6666665, 5.6666665) ;
   stroke(0, 0, 0, 255) ;
   fill(0, 0, 0, 255) ;
   ellipse(subs_23, subs_19, 2.8333333, 2.8333333) ;
   translate(-(subs_5+4.25), subs_27) ;
   stroke(0, 255, 255, 255) ;
   fill(0, 255, 255, 255) ;
   bezier((subs_7+-8.5), (subs_6+8.5), (subs_7+-8.5), subs_14, subs_15, subs_14,
          subs_15, (subs_6+8.5)) ;
   stroke(255, 255, 255, 255) ;
   fill(255, 255, 255, 255) ;
   translate((subs_7+-4.25), (subs_6+-2.8333333)) ;
   ellipse(0.0, 0.0, 5.6666665, 5.6666665) ;
   stroke(0, 0, 0, 255) ;
   fill(0, 0, 0, 255) ;
   ellipse(subs_24, subs_20, 2.8333333, 2.8333333) ;
   translate(-(subs_7+-4.25), subs_28) ;
   stroke(255, 255, 255, 255) ;
   fill(255, 255, 255, 255) ;
   translate((subs_7+4.25), (subs_6+-2.8333333)) ;
   ellipse(0.0, 0.0, 5.6666665, 5.6666665) ;
   stroke(0, 0, 0, 255) ;
   fill(0, 0, 0, 255) ;
   ellipse(subs_24, subs_20, 2.8333333, 2.8333333) ;
   translate(-(subs_7+4.25), subs_28) ;
   stroke(255, 184, 81, 255) ;
   fill(255, 184, 81, 255) ;
   bezier((subs_9+-8.5), (subs_8+8.5), (subs_9+-8.5), subs_16, subs_17, subs_16,
          subs_17, (subs_8+8.5)) ;
   stroke(255, 255, 255, 255) ;
   fill(255, 255, 255, 255) ;
   translate((subs_9+-4.25), (subs_8+-2.8333333)) ;
   ellipse(0.0, 0.0, 5.6666665, 5.6666665) ;
   stroke(0, 0, 0, 255) ;
   fill(0, 0, 0, 255) ;
   ellipse(subs_25, subs_21, 2.8333333, 2.8333333) ;
   translate(-(subs_9+-4.25), subs_29) ;
   stroke(255, 255, 255, 255) ;
   fill(255, 255, 255, 255) ;
   translate((subs_9+4.25), (subs_8+-2.8333333)) ;
   ellipse(0.0, 0.0, 5.6666665, 5.6666665) ;
   stroke(0, 0, 0, 255) ;
   fill(0, 0, 0, 255) ;
   ellipse(subs_25, subs_21, 2.8333333, 2.8333333) ;
   translate(-(subs_9+4.25), subs_29) ;
   v_314 = v_34 ;
   v_315 = v_35 ;
   stroke(255, 255, 0, 255) ;
   fill(255, 255, 0, 255) ;
   // Substitution Optimization settings.
   subs_30 = (1.0-(v_63/6.0)) ;
   //  
   arc(((subs_30*((v_38*17.0)+8.5))+((v_63/6.0)*((v_42*17.0)+8.5))),
       ((subs_30*((v_37*17.0)+8.5))+((v_63/6.0)*((v_41*17.0)+8.5))), 17.0, 17.0,
       (v_39+(v_314*0.15707964)), (v_39+(6.2831855-(v_314*0.15707964)))) ;
   if(((v_314 == 5) || (v_314 == 0))) {
      v_35 = (0-v_315) ;
      v_34 = (v_314+(0-v_315)) ;
      } else {
      v_34 = (v_314+v_315) ;}
   v_316 = v_1[(((v_41+round(sin(v_40)))*28)+(v_42+round(cos(v_40))))] ;
   v_317 = v_1[((v_41*28)+v_42)] ;
   // Eating
   if((v_63 == 6)) {
      if((v_317 == 1)) {
         v_1[((v_41*28)+v_42)] = 3 ;
         v_318 = v_2 ;
         v_2 = (v_318+-1) ;
         } 
      if((v_317 == 2)) {
         v_1[((v_41*28)+v_42)] = 3 ;} 
      } 
   v_319 = v_1[(((v_41+round(sin((((v_63 == 6) && !((v_316 == 0) || (v_316 == 4))) ? v_40 : v_39))))*28)+(v_42+round(cos((((v_63 == 6) && !((v_316 == 0) || (v_316 == 4))) ? v_40 : v_39)))))] ;
   v_320 = v_1[(((v_46+round(sin(v_45)))*28)+(v_47+round(cos(v_45))))] ;
   v_321 = v_1[(((v_46+round(sin((v_45+1.5707964))))*28)+(v_47+round(cos((v_45+1.5707964)))))] ;
   v_322 = v_1[(((v_46+round(sin((v_45+4.712389))))*28)+(v_47+round(cos((v_45+4.712389)))))] ;
   v_323 = v_1[(((v_51+round(sin(v_50)))*28)+(v_52+round(cos(v_50))))] ;
   v_324 = v_1[(((v_51+round(sin((v_50+1.5707964))))*28)+(v_52+round(cos((v_50+1.5707964)))))] ;
   v_325 = v_1[(((v_51+round(sin((v_50+4.712389))))*28)+(v_52+round(cos((v_50+4.712389)))))] ;
   v_326 = v_1[(((v_56+round(sin(v_55)))*28)+(v_57+round(cos(v_55))))] ;
   v_327 = v_1[(((v_56+round(sin((v_55+1.5707964))))*28)+(v_57+round(cos((v_55+1.5707964)))))] ;
   v_328 = v_1[(((v_56+round(sin((v_55+4.712389))))*28)+(v_57+round(cos((v_55+4.712389)))))] ;
   v_329 = v_1[(((v_61+round(sin(v_60)))*28)+(v_62+round(cos(v_60))))] ;
   v_330 = v_1[(((v_61+round(sin((v_60+1.5707964))))*28)+(v_62+round(cos((v_60+1.5707964)))))] ;
   v_331 = v_1[(((v_61+round(sin((v_60+4.712389))))*28)+(v_62+round(cos((v_60+4.712389)))))] ;
   resetMatrix() ;
   translate((screenWidth/2.0), (screenHeight/2.0)) ;
   scale(5.0, 5.0) ;
   fill(255, 255, 255, 255) ;
   if(v_67) {
      text("You have been eaten!", -65.0, -5.0, 500.0, 500.0) ;} 
   if(v_66) {
      text("You win!", -28.0, -5.0, 500.0, 500.0) ;} 
   v_332 = v_2 ;
   // Update state
   if(!(v_66 || v_67)) {
      // Substitution Optimization settings.
      subs_31 = ((v_37*17.0)+8.5) ;
      subs_32 = ((v_38*17.0)+8.5) ;
      subs_33 = ((v_58*17.0)+8.5) ;
      subs_34 = ((v_59*17.0)+8.5) ;
      subs_35 = (((subs_34-subs_32)*(subs_34-subs_32))+((subs_33-subs_31)*(subs_33-subs_31))) ;
      subs_36 = round(sin(v_39)) ;
      subs_37 = round(cos(v_39)) ;
      subs_38 = ((v_37+(2.0*subs_36))+(0.0-v_43)) ;
      subs_39 = ((v_38+(2.0*subs_37))+(0.0-v_44)) ;
      subs_40 = (((v_64 ? (v_37+(4.0*subs_36)) : 0.0)*17.0)+8.5) ;
      subs_41 = (((v_64 ? (v_38+(4.0*subs_37)) : 0.0)*17.0)+8.5) ;
      subs_42 = (((v_64 ? (v_43+(2.0*subs_38)) : 30.0)*17.0)+8.5) ;
      subs_43 = (((v_64 ? (v_44+(2.0*subs_39)) : 27.0)*17.0)+8.5) ;
      subs_44 = (((v_64 ? v_37 : 0.0)*17.0)+8.5) ;
      subs_45 = (((v_64 ? v_38 : 27.0)*17.0)+8.5) ;
      subs_46 = (((v_64 ? ((sqrt(subs_35) > 136.0) ? v_37 : 30.0) : 30.0)*17.0)+8.5) ;
      subs_47 = (((v_64 ? ((sqrt(subs_35) > 136.0) ? v_38 : -10.0) : -10.0)*17.0)+8.5) ;
      subs_48 = (((v_43+round(sin((v_45+1.5707964))))*17.0)+8.5) ;
      subs_49 = (((v_43+round(sin((v_45+4.712389))))*17.0)+8.5) ;
      subs_50 = (((v_44+round(cos((v_45+1.5707964))))*17.0)+8.5) ;
      subs_51 = (((v_44+round(cos((v_45+4.712389))))*17.0)+8.5) ;
      subs_52 = (((v_48+round(sin((v_50+1.5707964))))*17.0)+8.5) ;
      subs_53 = (((v_48+round(sin((v_50+4.712389))))*17.0)+8.5) ;
      subs_54 = (((v_49+round(cos((v_50+1.5707964))))*17.0)+8.5) ;
      subs_55 = (((v_49+round(cos((v_50+4.712389))))*17.0)+8.5) ;
      subs_56 = (((v_53+round(sin((v_55+1.5707964))))*17.0)+8.5) ;
      subs_57 = (((v_53+round(sin((v_55+4.712389))))*17.0)+8.5) ;
      subs_58 = (((v_54+round(cos((v_55+1.5707964))))*17.0)+8.5) ;
      subs_59 = (((v_54+round(cos((v_55+4.712389))))*17.0)+8.5) ;
      subs_60 = (((v_58+round(sin((v_60+1.5707964))))*17.0)+8.5) ;
      subs_61 = (((v_58+round(sin((v_60+4.712389))))*17.0)+8.5) ;
      subs_62 = (((v_59+round(cos((v_60+1.5707964))))*17.0)+8.5) ;
      subs_63 = (((v_59+round(cos((v_60+4.712389))))*17.0)+8.5) ;
      subs_64 = (((subs_50-subs_45)*(subs_50-subs_45))+((subs_48-subs_44)*(subs_48-subs_44))) ;
      subs_65 = (((subs_51-subs_45)*(subs_51-subs_45))+((subs_49-subs_44)*(subs_49-subs_44))) ;
      subs_66 = (((subs_54-subs_41)*(subs_54-subs_41))+((subs_52-subs_40)*(subs_52-subs_40))) ;
      subs_67 = (((subs_55-subs_41)*(subs_55-subs_41))+((subs_53-subs_40)*(subs_53-subs_40))) ;
      subs_68 = (((subs_58-subs_43)*(subs_58-subs_43))+((subs_56-subs_42)*(subs_56-subs_42))) ;
      subs_69 = (((subs_59-subs_43)*(subs_59-subs_43))+((subs_57-subs_42)*(subs_57-subs_42))) ;
      subs_70 = (((subs_62-subs_47)*(subs_62-subs_47))+((subs_60-subs_46)*(subs_60-subs_46))) ;
      subs_71 = (((subs_63-subs_47)*(subs_63-subs_47))+((subs_61-subs_46)*(subs_61-subs_46))) ;
      subs_72 = ((v_321 == 0) ? (v_45+4.712389) : ((sqrt(subs_64) <= sqrt(subs_65)) ? (v_45+1.5707964) : (v_45+4.712389))) ;
      subs_73 = ((v_322 == 0) ? (v_45+1.5707964) : subs_72) ;
      subs_74 = ((v_324 == 0) ? (v_50+4.712389) : ((sqrt(subs_66) <= sqrt(subs_67)) ? (v_50+1.5707964) : (v_50+4.712389))) ;
      subs_75 = ((v_325 == 0) ? (v_50+1.5707964) : subs_74) ;
      subs_76 = ((v_327 == 0) ? (v_55+4.712389) : ((sqrt(subs_68) <= sqrt(subs_69)) ? (v_55+1.5707964) : (v_55+4.712389))) ;
      subs_77 = ((v_328 == 0) ? (v_55+1.5707964) : subs_76) ;
      subs_78 = ((v_330 == 0) ? (v_60+4.712389) : ((sqrt(subs_70) <= sqrt(subs_71)) ? (v_60+1.5707964) : (v_60+4.712389))) ;
      subs_79 = ((v_331 == 0) ? (v_60+1.5707964) : subs_78) ;
      subs_80 = (((v_43+round(sin(subs_73)))*17.0)+8.5) ;
      subs_81 = (((v_43+round(sin(v_45)))*17.0)+8.5) ;
      subs_82 = (((v_44+round(cos(subs_73)))*17.0)+8.5) ;
      subs_83 = (((v_44+round(cos(v_45)))*17.0)+8.5) ;
      subs_84 = (((v_48+round(sin(subs_75)))*17.0)+8.5) ;
      subs_85 = (((v_48+round(sin(v_50)))*17.0)+8.5) ;
      subs_86 = (((v_49+round(cos(subs_75)))*17.0)+8.5) ;
      subs_87 = (((v_49+round(cos(v_50)))*17.0)+8.5) ;
      subs_88 = (((v_53+round(sin(subs_77)))*17.0)+8.5) ;
      subs_89 = (((v_53+round(sin(v_55)))*17.0)+8.5) ;
      subs_90 = (((v_54+round(cos(subs_77)))*17.0)+8.5) ;
      subs_91 = (((v_54+round(cos(v_55)))*17.0)+8.5) ;
      subs_92 = (((v_58+round(sin(subs_79)))*17.0)+8.5) ;
      subs_93 = (((v_58+round(sin(v_60)))*17.0)+8.5) ;
      subs_94 = (((v_59+round(cos(subs_79)))*17.0)+8.5) ;
      subs_95 = (((v_59+round(cos(v_60)))*17.0)+8.5) ;
      subs_96 = (((subs_82-subs_45)*(subs_82-subs_45))+((subs_80-subs_44)*(subs_80-subs_44))) ;
      subs_97 = (((subs_83-subs_45)*(subs_83-subs_45))+((subs_81-subs_44)*(subs_81-subs_44))) ;
      subs_98 = (((subs_86-subs_41)*(subs_86-subs_41))+((subs_84-subs_40)*(subs_84-subs_40))) ;
      subs_99 = (((subs_87-subs_41)*(subs_87-subs_41))+((subs_85-subs_40)*(subs_85-subs_40))) ;
      subs_100 = (((subs_90-subs_43)*(subs_90-subs_43))+((subs_88-subs_42)*(subs_88-subs_42))) ;
      subs_101 = (((subs_91-subs_43)*(subs_91-subs_43))+((subs_89-subs_42)*(subs_89-subs_42))) ;
      subs_102 = (((subs_94-subs_47)*(subs_94-subs_47))+((subs_92-subs_46)*(subs_92-subs_46))) ;
      subs_103 = (((subs_95-subs_47)*(subs_95-subs_47))+((subs_93-subs_46)*(subs_93-subs_46))) ;
      subs_104 = (((v_63 == 6) && !((v_316 == 0) || (v_316 == 4))) ? v_40 : v_39) ;
      subs_105 = ((v_320 == 0) ? subs_73 : ((sqrt(subs_97) <= sqrt(subs_96)) ? v_45 : subs_73)) ;
      subs_106 = ((v_323 == 0) ? subs_75 : ((sqrt(subs_99) <= sqrt(subs_98)) ? v_50 : subs_75)) ;
      subs_107 = ((v_326 == 0) ? subs_77 : ((sqrt(subs_101) <= sqrt(subs_100)) ? v_55 : subs_77)) ;
      subs_108 = ((v_329 == 0) ? subs_79 : ((sqrt(subs_103) <= sqrt(subs_102)) ? v_60 : subs_79)) ;
      subs_109 = ((v_63 == 6) ? ((((v_322 == 0) ? v_321 : ((v_321 == 0) ? v_322 : ((sqrt(subs_64) <= sqrt(subs_65)) ? v_321 : v_322))) == 0) ? v_45 : subs_105) : v_45) ;
      subs_110 = ((v_63 == 6) ? ((((v_325 == 0) ? v_324 : ((v_324 == 0) ? v_325 : ((sqrt(subs_66) <= sqrt(subs_67)) ? v_324 : v_325))) == 0) ? v_50 : subs_106) : v_50) ;
      subs_111 = ((v_63 == 6) ? ((((v_328 == 0) ? v_327 : ((v_327 == 0) ? v_328 : ((sqrt(subs_68) <= sqrt(subs_69)) ? v_327 : v_328))) == 0) ? v_55 : subs_107) : v_55) ;
      subs_112 = ((v_63 == 6) ? ((((v_331 == 0) ? v_330 : ((v_330 == 0) ? v_331 : ((sqrt(subs_70) <= sqrt(subs_71)) ? v_330 : v_331))) == 0) ? v_60 : subs_108) : v_60) ;
      //  
      // Substitution Optimization settings.
      subs_113 = !((v_319 == 0) || (v_319 == 4)) ;
      subs_114 = ((v_63 == 6) && subs_113) ;
      subs_115 = ((v_63 == 6) && (v_317 == 2)) ;
      //  
      v_3 = ((v_63 == 6) ? v_41 : v_37) ;
      v_4 = ((v_63 == 6) ? v_42 : v_38) ;
      v_5 = subs_104 ;
      v_6 = v_40 ;
      v_7 = (subs_114 ? (v_41+round(sin(subs_104))) : v_41) ;
      v_8 = (subs_114 ? (v_42+round(cos(subs_104))) : v_42) ;
      v_9 = ((v_63 == 6) ? v_46 : v_43) ;
      v_10 = ((v_63 == 6) ? v_47 : v_44) ;
      v_11 = subs_109 ;
      v_12 = ((v_63 == 6) ? (v_46+round(sin(subs_109))) : v_46) ;
      v_13 = ((v_63 == 6) ? (v_47+round(cos(subs_109))) : v_47) ;
      v_14 = ((v_63 == 6) ? v_51 : v_48) ;
      v_15 = ((v_63 == 6) ? v_52 : v_49) ;
      v_16 = subs_110 ;
      v_17 = ((v_63 == 6) ? (v_51+round(sin(subs_110))) : v_51) ;
      v_18 = ((v_63 == 6) ? (v_52+round(cos(subs_110))) : v_52) ;
      v_19 = ((v_63 == 6) ? v_56 : v_53) ;
      v_20 = ((v_63 == 6) ? v_57 : v_54) ;
      v_21 = subs_111 ;
      v_22 = ((v_63 == 6) ? (v_56+round(sin(subs_111))) : v_56) ;
      v_23 = ((v_63 == 6) ? (v_57+round(cos(subs_111))) : v_57) ;
      v_24 = ((v_63 == 6) ? v_61 : v_58) ;
      v_25 = ((v_63 == 6) ? v_62 : v_59) ;
      v_26 = subs_112 ;
      v_27 = ((v_63 == 6) ? (v_61+round(sin(subs_112))) : v_61) ;
      v_28 = ((v_63 == 6) ? (v_62+round(cos(subs_112))) : v_62) ;
      v_29 = ((v_63 == 6) ? 0 : (v_63+1)) ;
      v_30 = (subs_115 ? false : ((v_65 == 0) ? !v_64 : v_64)) ;
      v_31 = (subs_115 ? 350 : ((v_65 == 0) ? (v_64 ? 175 : 700) : (v_65-1))) ;
      v_32 = (v_332 == 0) ;
      v_33 = (((((v_37 == v_46) && (v_38 == v_47)) && (v_39 != v_45)) || ((v_37 == v_43) && (v_38 == v_44))) || (((((v_37 == v_51) && (v_38 == v_52)) && (v_39 != v_50)) || ((v_37 == v_48) && (v_38 == v_49))) || (((((v_37 == v_56) && (v_38 == v_57)) && (v_39 != v_55)) || ((v_37 == v_53) && (v_38 == v_54))) || (((((v_37 == v_61) && (v_38 == v_62)) && (v_39 != v_60)) || ((v_37 == v_58) && (v_38 == v_59))) || false)))) ;
      } 
   
}


void keyPressed() {
   v_333 = v_3 ;
   v_334 = v_4 ;
   v_335 = v_5 ;
   v_336 = v_6 ;
   v_337 = v_7 ;
   v_338 = v_8 ;
   v_339 = v_9 ;
   v_340 = v_10 ;
   v_341 = v_11 ;
   v_342 = v_12 ;
   v_343 = v_13 ;
   v_344 = v_14 ;
   v_345 = v_15 ;
   v_346 = v_16 ;
   v_347 = v_17 ;
   v_348 = v_18 ;
   v_349 = v_19 ;
   v_350 = v_20 ;
   v_351 = v_21 ;
   v_352 = v_22 ;
   v_353 = v_23 ;
   v_354 = v_24 ;
   v_355 = v_25 ;
   v_356 = v_26 ;
   v_357 = v_27 ;
   v_358 = v_28 ;
   v_359 = v_29 ;
   v_360 = v_30 ;
   v_361 = v_31 ;
   v_362 = v_32 ;
   v_363 = v_33 ;
   if((key == CODED)) {
      v_36 = (keyCode == UP) ;} else {
      v_36 = false ;}
   v_364 = v_36 ;
   if((key == CODED)) {
      v_36 = (keyCode == DOWN) ;} else {
      v_36 = false ;}
   v_365 = v_36 ;
   if((key == CODED)) {
      v_36 = (keyCode == LEFT) ;} else {
      v_36 = false ;}
   v_366 = v_36 ;
   if((key == CODED)) {
      v_36 = (keyCode == RIGHT) ;} else {
      v_36 = false ;}
   v_367 = v_36 ;
   v_3 = v_333 ;
   v_4 = v_334 ;
   v_5 = v_335 ;
   v_6 = (v_364 ? 4.712389 : (v_365 ? 1.5707964 : (v_366 ? 3.1415927 : (v_367 ? 0.0 : v_336)))) ;
   v_7 = v_337 ;
   v_8 = v_338 ;
   v_9 = v_339 ;
   v_10 = v_340 ;
   v_11 = v_341 ;
   v_12 = v_342 ;
   v_13 = v_343 ;
   v_14 = v_344 ;
   v_15 = v_345 ;
   v_16 = v_346 ;
   v_17 = v_347 ;
   v_18 = v_348 ;
   v_19 = v_349 ;
   v_20 = v_350 ;
   v_21 = v_351 ;
   v_22 = v_352 ;
   v_23 = v_353 ;
   v_24 = v_354 ;
   v_25 = v_355 ;
   v_26 = v_356 ;
   v_27 = v_357 ;
   v_28 = v_358 ;
   v_29 = v_359 ;
   v_30 = v_360 ;
   v_31 = v_361 ;
   v_32 = v_362 ;
   v_33 = v_363 ;
   
}